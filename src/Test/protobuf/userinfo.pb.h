// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userinfo.proto

#ifndef PROTOBUF_userinfo_2eproto__INCLUDED
#define PROTOBUF_userinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_userinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBaseInfoImpl();
void InitDefaultsBaseInfo();
inline void InitDefaults() {
  InitDefaultsBaseInfo();
}
}  // namespace protobuf_userinfo_2eproto
class BaseInfo;
class BaseInfoDefaultTypeInternal;
extern BaseInfoDefaultTypeInternal _BaseInfo_default_instance_;

// ===================================================================

class BaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BaseInfo) */ {
 public:
  BaseInfo();
  virtual ~BaseInfo();

  BaseInfo(const BaseInfo& from);

  inline BaseInfo& operator=(const BaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseInfo(BaseInfo&& from) noexcept
    : BaseInfo() {
    *this = ::std::move(from);
  }

  inline BaseInfo& operator=(BaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseInfo* internal_default_instance() {
    return reinterpret_cast<const BaseInfo*>(
               &_BaseInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BaseInfo* other);
  friend void swap(BaseInfo& a, BaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseInfo& from);
  void MergeFrom(const BaseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string NickName = 3;
  void clear_nickname();
  static const int kNickNameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // int32 UserID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  ::google::protobuf::int32 userid() const;
  void set_userid(::google::protobuf::int32 value);

  // int32 GameID = 2;
  void clear_gameid();
  static const int kGameIDFieldNumber = 2;
  ::google::protobuf::int32 gameid() const;
  void set_gameid(::google::protobuf::int32 value);

  // float test_fff = 4;
  void clear_test_fff();
  static const int kTestFffFieldNumber = 4;
  float test_fff() const;
  void set_test_fff(float value);

  // @@protoc_insertion_point(class_scope:BaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 gameid_;
  float test_fff_;
  mutable int _cached_size_;
  friend struct ::protobuf_userinfo_2eproto::TableStruct;
  friend void ::protobuf_userinfo_2eproto::InitDefaultsBaseInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseInfo

// int32 UserID = 1;
inline void BaseInfo::clear_userid() {
  userid_ = 0;
}
inline ::google::protobuf::int32 BaseInfo::userid() const {
  // @@protoc_insertion_point(field_get:BaseInfo.UserID)
  return userid_;
}
inline void BaseInfo::set_userid(::google::protobuf::int32 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:BaseInfo.UserID)
}

// int32 GameID = 2;
inline void BaseInfo::clear_gameid() {
  gameid_ = 0;
}
inline ::google::protobuf::int32 BaseInfo::gameid() const {
  // @@protoc_insertion_point(field_get:BaseInfo.GameID)
  return gameid_;
}
inline void BaseInfo::set_gameid(::google::protobuf::int32 value) {
  
  gameid_ = value;
  // @@protoc_insertion_point(field_set:BaseInfo.GameID)
}

// string NickName = 3;
inline void BaseInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseInfo::nickname() const {
  // @@protoc_insertion_point(field_get:BaseInfo.NickName)
  return nickname_.GetNoArena();
}
inline void BaseInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BaseInfo.NickName)
}
#if LANG_CXX11
inline void BaseInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BaseInfo.NickName)
}
#endif
inline void BaseInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BaseInfo.NickName)
}
inline void BaseInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BaseInfo.NickName)
}
inline ::std::string* BaseInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:BaseInfo.NickName)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:BaseInfo.NickName)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:BaseInfo.NickName)
}

// float test_fff = 4;
inline void BaseInfo::clear_test_fff() {
  test_fff_ = 0;
}
inline float BaseInfo::test_fff() const {
  // @@protoc_insertion_point(field_get:BaseInfo.test_fff)
  return test_fff_;
}
inline void BaseInfo::set_test_fff(float value) {
  
  test_fff_ = value;
  // @@protoc_insertion_point(field_set:BaseInfo.test_fff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_userinfo_2eproto__INCLUDED
